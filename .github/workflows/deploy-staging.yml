name: Deploy to Staging

on:
  push:
    branches:
      - main  # Or any branch that triggers the workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} .

      - name: Run tests inside the Docker container
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} /bin/sh -c "run_tests.sh"

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

      - name: Deploy to Staging (Manual Rolling Update)
        run: |
          # SSH into the staging server
          ssh user@staging-server << 'EOF'
          # Pull the new Docker image
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

          # Run the new container (v2) on a different port
          docker run -d --name my-app-v2 -p 8081:80 ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

          # Update the reverse proxy (Nginx) to route traffic to the new container
          sed -i 's/8080/8081/' /etc/nginx/sites-available/default
          nginx -s reload

          # Validate the new version (you can add more specific checks here)
          # If the validation fails, do not proceed with removing the old container
          if curl -s http://localhost:8081 | grep -q "expected_output"; then
              # Remove old container (v1) if the validation is successful
              docker rm -f my-app-v1
          else
              echo "Validation failed. Rolling back to previous version."
              exit 1
          fi
          EOF

      - name: Rollback Strategy (If Deployment Fails)
        if: failure()
        run: |
          # SSH into the staging server and revert to v1 container if v2 fails
          ssh user@staging-server << 'EOF'
          # Ensure the new container (v2) is stopped and removed
          docker stop my-app-v2 || true
          docker rm my-app-v2 || true

          # Revert Nginx configuration to route traffic back to v1 container
          sed -i 's/8081/8080/' /etc/nginx/sites-available/default
          nginx -s reload

          # Restart the old container (v1) if needed
          docker start my-app-v1
          EOF
